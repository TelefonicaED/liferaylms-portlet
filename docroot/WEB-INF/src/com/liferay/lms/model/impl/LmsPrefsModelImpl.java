/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.LmsPrefs;
import com.liferay.lms.model.LmsPrefsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LmsPrefs service. Represents a row in the &quot;Lms_LmsPrefs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.LmsPrefsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LmsPrefsImpl}.
 * </p>
 *
 * @author TLS
 * @see LmsPrefsImpl
 * @see com.liferay.lms.model.LmsPrefs
 * @see com.liferay.lms.model.LmsPrefsModel
 * @generated
 */
public class LmsPrefsModelImpl extends BaseModelImpl<LmsPrefs>
	implements LmsPrefsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lms prefs model instance should use the {@link com.liferay.lms.model.LmsPrefs} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_LmsPrefs";
	public static final Object[][] TABLE_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "teacherRole", Types.BIGINT },
			{ "editorRole", Types.BIGINT },
			{ "inspectorRole", Types.BIGINT },
			{ "lmsTemplates", Types.VARCHAR },
			{ "activities", Types.VARCHAR },
			{ "courseevals", Types.VARCHAR },
			{ "scoretranslators", Types.VARCHAR },
			{ "inscriptionTypes", Types.VARCHAR },
			{ "usersResults", Types.BIGINT },
			{ "debugScorm", Types.BOOLEAN },
			{ "hasAPILicence", Types.BOOLEAN },
			{ "showHideActivity", Types.BOOLEAN },
			{ "viewCoursesFinished", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_LmsPrefs (companyId LONG not null primary key,teacherRole LONG,editorRole LONG,inspectorRole LONG,lmsTemplates VARCHAR(75) null,activities VARCHAR(75) null,courseevals VARCHAR(75) null,scoretranslators VARCHAR(75) null,inscriptionTypes VARCHAR(75) null,usersResults LONG,debugScorm BOOLEAN,hasAPILicence BOOLEAN,showHideActivity BOOLEAN,viewCoursesFinished BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Lms_LmsPrefs";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.LmsPrefs"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.LmsPrefs"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.LmsPrefs"));

	public LmsPrefsModelImpl() {
	}

	public long getPrimaryKey() {
		return _companyId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCompanyId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_companyId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LmsPrefs.class;
	}

	public String getModelClassName() {
		return LmsPrefs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("companyId", getCompanyId());
		attributes.put("teacherRole", getTeacherRole());
		attributes.put("editorRole", getEditorRole());
		attributes.put("inspectorRole", getInspectorRole());
		attributes.put("lmsTemplates", getLmsTemplates());
		attributes.put("activities", getActivities());
		attributes.put("courseevals", getCourseevals());
		attributes.put("scoretranslators", getScoretranslators());
		attributes.put("inscriptionTypes", getInscriptionTypes());
		attributes.put("usersResults", getUsersResults());
		attributes.put("debugScorm", getDebugScorm());
		attributes.put("hasAPILicence", getHasAPILicence());
		attributes.put("showHideActivity", getShowHideActivity());
		attributes.put("viewCoursesFinished", getViewCoursesFinished());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long teacherRole = (Long)attributes.get("teacherRole");

		if (teacherRole != null) {
			setTeacherRole(teacherRole);
		}

		Long editorRole = (Long)attributes.get("editorRole");

		if (editorRole != null) {
			setEditorRole(editorRole);
		}

		Long inspectorRole = (Long)attributes.get("inspectorRole");

		if (inspectorRole != null) {
			setInspectorRole(inspectorRole);
		}

		String lmsTemplates = (String)attributes.get("lmsTemplates");

		if (lmsTemplates != null) {
			setLmsTemplates(lmsTemplates);
		}

		String activities = (String)attributes.get("activities");

		if (activities != null) {
			setActivities(activities);
		}

		String courseevals = (String)attributes.get("courseevals");

		if (courseevals != null) {
			setCourseevals(courseevals);
		}

		String scoretranslators = (String)attributes.get("scoretranslators");

		if (scoretranslators != null) {
			setScoretranslators(scoretranslators);
		}

		String inscriptionTypes = (String)attributes.get("inscriptionTypes");

		if (inscriptionTypes != null) {
			setInscriptionTypes(inscriptionTypes);
		}

		Long usersResults = (Long)attributes.get("usersResults");

		if (usersResults != null) {
			setUsersResults(usersResults);
		}

		Boolean debugScorm = (Boolean)attributes.get("debugScorm");

		if (debugScorm != null) {
			setDebugScorm(debugScorm);
		}

		Boolean hasAPILicence = (Boolean)attributes.get("hasAPILicence");

		if (hasAPILicence != null) {
			setHasAPILicence(hasAPILicence);
		}

		Boolean showHideActivity = (Boolean)attributes.get("showHideActivity");

		if (showHideActivity != null) {
			setShowHideActivity(showHideActivity);
		}

		Boolean viewCoursesFinished = (Boolean)attributes.get(
				"viewCoursesFinished");

		if (viewCoursesFinished != null) {
			setViewCoursesFinished(viewCoursesFinished);
		}
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getTeacherRole() {
		return _teacherRole;
	}

	public void setTeacherRole(long teacherRole) {
		_teacherRole = teacherRole;
	}

	public long getEditorRole() {
		return _editorRole;
	}

	public void setEditorRole(long editorRole) {
		_editorRole = editorRole;
	}

	public long getInspectorRole() {
		return _inspectorRole;
	}

	public void setInspectorRole(long inspectorRole) {
		_inspectorRole = inspectorRole;
	}

	public String getLmsTemplates() {
		if (_lmsTemplates == null) {
			return StringPool.BLANK;
		}
		else {
			return _lmsTemplates;
		}
	}

	public void setLmsTemplates(String lmsTemplates) {
		_lmsTemplates = lmsTemplates;
	}

	public String getActivities() {
		if (_activities == null) {
			return StringPool.BLANK;
		}
		else {
			return _activities;
		}
	}

	public void setActivities(String activities) {
		_activities = activities;
	}

	public String getCourseevals() {
		if (_courseevals == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseevals;
		}
	}

	public void setCourseevals(String courseevals) {
		_courseevals = courseevals;
	}

	public String getScoretranslators() {
		if (_scoretranslators == null) {
			return StringPool.BLANK;
		}
		else {
			return _scoretranslators;
		}
	}

	public void setScoretranslators(String scoretranslators) {
		_scoretranslators = scoretranslators;
	}

	public String getInscriptionTypes() {
		if (_inscriptionTypes == null) {
			return StringPool.BLANK;
		}
		else {
			return _inscriptionTypes;
		}
	}

	public void setInscriptionTypes(String inscriptionTypes) {
		_inscriptionTypes = inscriptionTypes;
	}

	public long getUsersResults() {
		return _usersResults;
	}

	public void setUsersResults(long usersResults) {
		_usersResults = usersResults;
	}

	public boolean getDebugScorm() {
		return _debugScorm;
	}

	public boolean isDebugScorm() {
		return _debugScorm;
	}

	public void setDebugScorm(boolean debugScorm) {
		_debugScorm = debugScorm;
	}

	public boolean getHasAPILicence() {
		return _hasAPILicence;
	}

	public boolean isHasAPILicence() {
		return _hasAPILicence;
	}

	public void setHasAPILicence(boolean hasAPILicence) {
		_hasAPILicence = hasAPILicence;
	}

	public boolean getShowHideActivity() {
		return _showHideActivity;
	}

	public boolean isShowHideActivity() {
		return _showHideActivity;
	}

	public void setShowHideActivity(boolean showHideActivity) {
		_showHideActivity = showHideActivity;
	}

	public boolean getViewCoursesFinished() {
		return _viewCoursesFinished;
	}

	public boolean isViewCoursesFinished() {
		return _viewCoursesFinished;
	}

	public void setViewCoursesFinished(boolean viewCoursesFinished) {
		_viewCoursesFinished = viewCoursesFinished;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LmsPrefs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LmsPrefs toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LmsPrefs)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LmsPrefsImpl lmsPrefsImpl = new LmsPrefsImpl();

		lmsPrefsImpl.setCompanyId(getCompanyId());
		lmsPrefsImpl.setTeacherRole(getTeacherRole());
		lmsPrefsImpl.setEditorRole(getEditorRole());
		lmsPrefsImpl.setInspectorRole(getInspectorRole());
		lmsPrefsImpl.setLmsTemplates(getLmsTemplates());
		lmsPrefsImpl.setActivities(getActivities());
		lmsPrefsImpl.setCourseevals(getCourseevals());
		lmsPrefsImpl.setScoretranslators(getScoretranslators());
		lmsPrefsImpl.setInscriptionTypes(getInscriptionTypes());
		lmsPrefsImpl.setUsersResults(getUsersResults());
		lmsPrefsImpl.setDebugScorm(getDebugScorm());
		lmsPrefsImpl.setHasAPILicence(getHasAPILicence());
		lmsPrefsImpl.setShowHideActivity(getShowHideActivity());
		lmsPrefsImpl.setViewCoursesFinished(getViewCoursesFinished());

		lmsPrefsImpl.resetOriginalValues();

		return lmsPrefsImpl;
	}

	public int compareTo(LmsPrefs lmsPrefs) {
		long primaryKey = lmsPrefs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LmsPrefs lmsPrefs = null;

		try {
			lmsPrefs = (LmsPrefs)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = lmsPrefs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LmsPrefs> toCacheModel() {
		LmsPrefsCacheModel lmsPrefsCacheModel = new LmsPrefsCacheModel();

		lmsPrefsCacheModel.companyId = getCompanyId();

		lmsPrefsCacheModel.teacherRole = getTeacherRole();

		lmsPrefsCacheModel.editorRole = getEditorRole();

		lmsPrefsCacheModel.inspectorRole = getInspectorRole();

		lmsPrefsCacheModel.lmsTemplates = getLmsTemplates();

		String lmsTemplates = lmsPrefsCacheModel.lmsTemplates;

		if ((lmsTemplates != null) && (lmsTemplates.length() == 0)) {
			lmsPrefsCacheModel.lmsTemplates = null;
		}

		lmsPrefsCacheModel.activities = getActivities();

		String activities = lmsPrefsCacheModel.activities;

		if ((activities != null) && (activities.length() == 0)) {
			lmsPrefsCacheModel.activities = null;
		}

		lmsPrefsCacheModel.courseevals = getCourseevals();

		String courseevals = lmsPrefsCacheModel.courseevals;

		if ((courseevals != null) && (courseevals.length() == 0)) {
			lmsPrefsCacheModel.courseevals = null;
		}

		lmsPrefsCacheModel.scoretranslators = getScoretranslators();

		String scoretranslators = lmsPrefsCacheModel.scoretranslators;

		if ((scoretranslators != null) && (scoretranslators.length() == 0)) {
			lmsPrefsCacheModel.scoretranslators = null;
		}

		lmsPrefsCacheModel.inscriptionTypes = getInscriptionTypes();

		String inscriptionTypes = lmsPrefsCacheModel.inscriptionTypes;

		if ((inscriptionTypes != null) && (inscriptionTypes.length() == 0)) {
			lmsPrefsCacheModel.inscriptionTypes = null;
		}

		lmsPrefsCacheModel.usersResults = getUsersResults();

		lmsPrefsCacheModel.debugScorm = getDebugScorm();

		lmsPrefsCacheModel.hasAPILicence = getHasAPILicence();

		lmsPrefsCacheModel.showHideActivity = getShowHideActivity();

		lmsPrefsCacheModel.viewCoursesFinished = getViewCoursesFinished();

		return lmsPrefsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{companyId=");
		sb.append(getCompanyId());
		sb.append(", teacherRole=");
		sb.append(getTeacherRole());
		sb.append(", editorRole=");
		sb.append(getEditorRole());
		sb.append(", inspectorRole=");
		sb.append(getInspectorRole());
		sb.append(", lmsTemplates=");
		sb.append(getLmsTemplates());
		sb.append(", activities=");
		sb.append(getActivities());
		sb.append(", courseevals=");
		sb.append(getCourseevals());
		sb.append(", scoretranslators=");
		sb.append(getScoretranslators());
		sb.append(", inscriptionTypes=");
		sb.append(getInscriptionTypes());
		sb.append(", usersResults=");
		sb.append(getUsersResults());
		sb.append(", debugScorm=");
		sb.append(getDebugScorm());
		sb.append(", hasAPILicence=");
		sb.append(getHasAPILicence());
		sb.append(", showHideActivity=");
		sb.append(getShowHideActivity());
		sb.append(", viewCoursesFinished=");
		sb.append(getViewCoursesFinished());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.LmsPrefs");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teacherRole</column-name><column-value><![CDATA[");
		sb.append(getTeacherRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editorRole</column-name><column-value><![CDATA[");
		sb.append(getEditorRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorRole</column-name><column-value><![CDATA[");
		sb.append(getInspectorRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lmsTemplates</column-name><column-value><![CDATA[");
		sb.append(getLmsTemplates());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activities</column-name><column-value><![CDATA[");
		sb.append(getActivities());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseevals</column-name><column-value><![CDATA[");
		sb.append(getCourseevals());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scoretranslators</column-name><column-value><![CDATA[");
		sb.append(getScoretranslators());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inscriptionTypes</column-name><column-value><![CDATA[");
		sb.append(getInscriptionTypes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usersResults</column-name><column-value><![CDATA[");
		sb.append(getUsersResults());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debugScorm</column-name><column-value><![CDATA[");
		sb.append(getDebugScorm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAPILicence</column-name><column-value><![CDATA[");
		sb.append(getHasAPILicence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>showHideActivity</column-name><column-value><![CDATA[");
		sb.append(getShowHideActivity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCoursesFinished</column-name><column-value><![CDATA[");
		sb.append(getViewCoursesFinished());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LmsPrefs.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LmsPrefs.class
		};
	private long _companyId;
	private long _teacherRole;
	private long _editorRole;
	private long _inspectorRole;
	private String _lmsTemplates;
	private String _activities;
	private String _courseevals;
	private String _scoretranslators;
	private String _inscriptionTypes;
	private long _usersResults;
	private boolean _debugScorm;
	private boolean _hasAPILicence;
	private boolean _showHideActivity;
	private boolean _viewCoursesFinished;
	private LmsPrefs _escapedModelProxy;
}